apply plugin: 'kotlin'

description 'Atomic Swap Cordapp - Workflows'

cordapp {
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
    workflow {
        name "Atomic Swap Cordapp"
        versionId 1
        vendor "R3"
    }
}

dependencies {
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    api project(':evm-interop-common')
    api ("org.web3j:core:$web3jVersion") { transitive = true }

    cordapp project(':evm-interop-contracts')
    cordapp project(':evm-interop-workflows')

    // test dependencies
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoVersion"

    testImplementation("org.web3j:core:$web3jVersion")
    testImplementation("org.web3j:utils:$web3jVersion")
    testImplementation("org.web3j:crypto:$web3jVersion")
    testImplementation("org.web3j:rlp:$web3jVersion")

    testImplementation "$corda_release_group:corda-node:$corda_release_version"
    testImplementation "$corda_release_group:corda-node-driver:$corda_release_version"
    testImplementation "$corda_release_group:corda-core-test-utils:$corda_release_version"
}

jar {
    archiveBaseName = 'swap-workflows'
}
