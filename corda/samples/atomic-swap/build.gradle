apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

description 'Atomic Swap Demo'

cordapp {
    info {
        name "Atomic Swap Demo"
        vendor "R3"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version
    }
}

dependencies {
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    cordaDriver project(':evm-interop-common')
    cordaDriver("org.web3j:core:$web3jVersion") { transitive = true }
    cordaDriver "net.corda:corda-shell:4.9"

    cordapp project(':evm-interop-contracts')
    cordapp project(':evm-interop-workflows')
    cordapp project(':samples:atomic-swap:swap-workflows')
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    nodeDefaults {
        runSchemaMigration = true
        notary = [validating: false]
        projectCordapp { deploy = false }
        extraConfig = [ 'devMode' : true, quasarExcludePackages: ["okhttp3**"] ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]

        cordapp project(':evm-interop-contracts')
        cordapp project(':evm-interop-workflows')
        cordapp project(':samples:atomic-swap:swap-workflows')
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: true]
        p2pPort 10001
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5001"
                ]
        ]
        rpcSettings {
            address("localhost:10011")
            adminAddress("localhost:10021")
        }
    }

    node {
        name "O=Alice,L=London,C=GB"
        p2pPort 10002
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5002"
                ]
        ]
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10022")
        }

    }

    node {
        name "O=Bob,L=San Francisco,C=US"
        p2pPort 10003
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5003"
                ]
        ]
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10023")
        }
    }

    node {
        name "O=Charlie,L=Mumbai,C=IN"
        p2pPort 10004
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5004"
                ]
        ]
        rpcSettings {
            address("localhost:10014")
            adminAddress("localhost:10024")
        }
    }
}
