package com.r3.corda.evminterop.workflows.swap

import co.paralleluniverse.fibers.Suspendable
import com.r3.corda.evminterop.contracts.swap.LockCommand
import com.r3.corda.evminterop.states.swap.LockState
import com.r3.corda.evminterop.states.swap.UnlockData
import net.corda.core.contracts.Command
import net.corda.core.contracts.OwnableState
import net.corda.core.contracts.StateAndRef
import net.corda.core.flows.*
import net.corda.core.transactions.SignedTransaction
import net.corda.core.transactions.TransactionBuilder
import net.corda.core.utilities.ProgressTracker
import net.corda.core.utilities.loggerFor

/**
 * Initiating flow which transfers the Corda asset to the new owner (calling party) using proofs generated by
 * approved Corda validators.
 */
@StartableByRPC
@InitiatingFlow
class RevertTransactionAndReturnAssetFlow(
    private val lockedAsset: StateAndRef<OwnableState>,
    private val lockState: StateAndRef<LockState>,
    private val unlockData: UnlockData
) : FlowLogic<SignedTransaction>() {


    @Suppress("ClassName")
    companion object {
        object BUILD_TRANSACTION : ProgressTracker.Step("Build transaction.")
        object VERIFY_TRANSACTION : ProgressTracker.Step("Verify transaction.")
        object SIGN_TRANSACTION : ProgressTracker.Step("Sign transaction.")
        object NOTARIZE_TRANSACTION : ProgressTracker.Step("Notarize transaction")

        fun tracker() = ProgressTracker(
            BUILD_TRANSACTION,
            VERIFY_TRANSACTION,
            SIGN_TRANSACTION,
            NOTARIZE_TRANSACTION
        )

        val log = loggerFor<UnlockTransactionAndObtainAssetFlow>()
    }

    override val progressTracker: ProgressTracker = tracker()

    @Suspendable
    override fun call(): SignedTransaction {

        progressTracker.currentStep = BUILD_TRANSACTION

        val notary = serviceHub.identityService.partyFromKey(lockState.state.data.notary)
            ?: throw IllegalArgumentException("The specified notary does not resolve to a known Party")
        val newOwner = serviceHub.identityService.partyFromKey(lockState.state.data.assetSender)
            ?: throw IllegalArgumentException("The specified recipient does not resolve to a known Party")

        val revertCommand = Command(LockCommand.Revert(unlockData), listOf(ourIdentity.owningKey))
        val builder = TransactionBuilder(notary = notary)
            .addInputState(lockedAsset)
            .addInputState(lockState)
            .addOutputState(lockedAsset.state.data.withNewOwner(newOwner).ownableState)
            .addCommand(revertCommand)

        progressTracker.currentStep = VERIFY_TRANSACTION

        builder.verify(serviceHub)

        progressTracker.currentStep = SIGN_TRANSACTION

        val ptx = serviceHub.signInitialTransaction(builder)
        val stx = subFlow(CollectSignaturesFlow(ptx, emptySet()))

        progressTracker.currentStep = NOTARIZE_TRANSACTION

        val participantsSessions = (lockedAsset.state.data.participants - ourIdentity).map { initiateFlow(it) }
        return subFlow(FinalityFlow(stx, participantsSessions))
    }
}

@InitiatedBy(RevertTransactionAndReturnAssetFlow::class)
class RevertTransactionAndReturnAssetFlowResponder(val session: FlowSession) : FlowLogic<Unit>() {

    @Suspendable
    override fun call() {
        subFlow(ReceiveFinalityFlow(session))
    }
}
